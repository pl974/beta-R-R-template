---
// src/components/Header.astro
import { getEntry } from 'astro:content';

// Récupération des paramètres de navigation depuis le CMS
let navConfig;
try {
  navConfig = await getEntry('navigation', 'header');
} catch (error) {
  console.error("Erreur lors du chargement de la navigation:", error);
}

// Valeurs par défaut si la configuration n'est pas chargée
const defaultNav = {
  logo: "/images/logo.svg",
  logoText: "VotreMétier",
  phone: "01 23 45 67 89",
  menuItems: [
    {
      title: "Accueil",
      url: "/",
      hasDropdown: false
    },
    {
      title: "Nos Services",
      url: "/services",
      hasDropdown: true,
      dropdownItems: [
        {
          title: "Service 1",
          url: "/services/service1",
          description: "Description du service 1",
          icon: "wrench"
        },
        {
          title: "Service 2",
          url: "/services/service2",
          description: "Description du service 2",
          icon: "bolt"
        }
      ]
    },
    {
      title: "Qui sommes-nous",
      url: "/about",
      hasDropdown: false
    },
    {
      title: "Blog",
      url: "/blog",
      hasDropdown: false
    }
  ],
  ctaButton: {
    text: "Devis gratuit",
    url: "/contact"
  }
};

// Utiliser la configuration du CMS ou les valeurs par défaut
const { logo, logoText, phone, menuItems, ctaButton } = navConfig?.data || defaultNav;

// Variable pour gérer l'état du menu mobile
const isMobileMenuOpen = false;
---

<header class="bg-white shadow-md sticky top-0 z-50">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center py-4 md:justify-start md:space-x-10">
      <!-- Logo -->
      <div class="flex justify-start lg:w-0 lg:flex-1">
        <a href="/" class="flex items-center">
          <span class="sr-only">Logo</span>
          <img class="h-10 w-auto sm:h-12" src={logo} alt="Logo" />
          <span class="ml-3 text-xl font-bold text-gray-900">{logoText}</span>
        </a>
      </div>
      
      <!-- Mobile menu button -->
      <div class="-mr-2 -my-2 md:hidden">
        <button type="button" class="mobile-menu-button bg-white rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500" aria-expanded="false">
          <span class="sr-only">Ouvrir le menu</span>
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
      
      <!-- Desktop navigation -->
      <nav class="hidden md:flex space-x-8">
        {menuItems.map((item) => (
          item.hasDropdown ? (
            <div class="relative">
              <button type="button" class="group bg-white rounded-md text-gray-700 inline-flex items-center text-base font-medium hover:text-blue-600 focus:outline-none dropdown-button" aria-expanded="false">
                <span>{item.title}</span>
                <svg class="ml-2 h-5 w-5 text-gray-400 group-hover:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </button>
              
              <div class="hidden dropdown-menu absolute z-10 -ml-4 mt-3 transform px-2 w-screen max-w-md sm:px-0 lg:ml-0 lg:left-1/2 lg:-translate-x-1/2">
                <div class="rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 overflow-hidden">
                  <div class="relative grid gap-6 bg-white px-5 py-6 sm:gap-8 sm:p-8">
                    {item.dropdownItems?.map((dropdownItem) => (
                      <a href={dropdownItem.url} class="-m-3 p-3 flex items-start rounded-lg hover:bg-gray-50">
                        <div class="flex-shrink-0 flex items-center justify-center h-10 w-10 rounded-md bg-blue-500 text-white sm:h-12 sm:w-12">
                          <i class={`fa-solid fa-${dropdownItem.icon || 'circle'}`}></i>
                        </div>
                        <div class="ml-4">
                          <p class="text-base font-medium text-gray-900">{dropdownItem.title}</p>
                          <p class="mt-1 text-sm text-gray-500">{dropdownItem.description}</p>
                        </div>
                      </a>
                    ))}
                  </div>
                  <div class="px-5 py-5 bg-gray-50 space-y-6 sm:flex sm:space-y-0 sm:space-x-10 sm:px-8">
                    <div class="flow-root">
                      <a href={item.url} class="-m-3 p-3 flex items-center rounded-md text-base font-medium text-gray-900 hover:bg-gray-100">
                        <svg class="flex-shrink-0 h-6 w-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                        </svg>
                        <span class="ml-3">Voir tous nos {item.title.toLowerCase()}</span>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <a href={item.url} class={`text-base font-medium ${item.isButton ? 'bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded-md' : 'text-gray-700 hover:text-blue-600'}`}>
              {item.title}
            </a>
          )
        ))}
      </nav>
      
      <!-- Call to action - MODIFICATION ICI -->
      <div class="hidden md:flex flex-col items-end justify-end md:flex-1 lg:w-0">
        <a href={ctaButton.url} class="whitespace-nowrap inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-blue-600 hover:bg-blue-700 transition duration-300">
          {ctaButton.text}
        </a>
        <a href={`tel:${phone.replace(/\s/g, '')}`} class="mt-2 whitespace-nowrap text-base font-medium text-gray-700 hover:text-gray-900">
          <i class="fa-solid fa-phone mr-2 text-blue-600"></i>
          {phone}
        </a>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu - reste inchangé -->
  <div class="hidden mobile-menu md:hidden">
    <!-- ... Code du menu mobile ... -->
  </div>
</header>
<script>
  // Script pour gérer les interactions du menu
  document.addEventListener('DOMContentLoaded', () => {
    // Menu dropdowns
    const dropdownButtons = document.querySelectorAll('.dropdown-button');
    dropdownButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const dropdown = button.nextElementSibling;
        dropdown.classList.toggle('hidden');
        button.setAttribute('aria-expanded', dropdown.classList.contains('hidden') ? 'false' : 'true');
        
        // Fermer les autres dropdowns
        dropdownButtons.forEach(otherButton => {
          if (otherButton !== button) {
            const otherDropdown = otherButton.nextElementSibling;
            if (otherDropdown && !otherDropdown.classList.contains('hidden')) {
              otherDropdown.classList.add('hidden');
              otherButton.setAttribute('aria-expanded', 'false');
            }
          }
        });
        
        e.stopPropagation();
      });
    });
    
    // Fermer les dropdowns si on clique ailleurs
    document.addEventListener('click', () => {
      document.querySelectorAll('.dropdown-menu').forEach(dropdown => {
        dropdown.classList.add('hidden');
      });
      dropdownButtons.forEach(button => {
        button.setAttribute('aria-expanded', 'false');
      });
    });
    
    // Mobile menu
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      mobileMenuButton.setAttribute(
        'aria-expanded',
        mobileMenu.classList.contains('hidden') ? 'false' : 'true'
      );
    });
    
    // Mobile submenus
    const mobileSubmenuButtons = document.querySelectorAll('.mobile-submenu-button');
    mobileSubmenuButtons.forEach(button => {
      button.addEventListener('click', () => {
        const submenu = button.nextElementSibling;
        submenu.classList.toggle('hidden');
        
        // Animate the icon
        const icon = button.querySelector('svg');
        icon.style.transform = submenu.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
        icon.style.transition = 'transform 0.2s';
      });
    });
  });
</script>