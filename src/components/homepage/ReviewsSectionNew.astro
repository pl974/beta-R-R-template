---
interface Testimonial {
  name: string;
  photo?: string;
  rating: number;
  comment: string;
  date: string;
  city: string;
  service: string;
}

interface Props {
  title?: string;
  description?: string;
  testimonials?: Testimonial[];
}

const { 
  title = "Ce Que Disent Nos Clients", 
  description = "Découvrez les témoignages de nos clients satisfaits.", 
  testimonials = [] 
} = Astro.props;

// Fonction pour générer les étoiles selon la note
const generateStars = (rating: number) => {
  const stars = [];
  
  // Étoiles pleines
  for (let i = 1; i <= Math.floor(rating); i++) {
    stars.push('<i class="fa-solid fa-star text-yellow-400"></i>');
  }
  
  // Demi-étoile si nécessaire
  if (rating % 1 !== 0) {
    stars.push('<i class="fa-solid fa-star-half-alt text-yellow-400"></i>');
  }
  
  // Étoiles vides
  const emptyStars = 5 - Math.ceil(rating);
  for (let i = 1; i <= emptyStars; i++) {
    stars.push('<i class="fa-regular fa-star text-yellow-400"></i>');
  }
  
  return stars.join(' ');
};
---

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center max-w-3xl mx-auto mb-12">
      <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
        {title}
      </h2>
      <p class="text-lg text-gray-700">
        {description}
      </p>
      <div class="w-20 h-1 bg-blue-600 mx-auto mt-6"></div>
    </div>
    
    <!-- Note globale -->
    <div class="max-w-4xl mx-auto mb-12 bg-white rounded-lg shadow-md p-6 flex flex-col sm:flex-row items-center justify-center gap-8">
      <div class="text-center sm:text-left">
        <div class="text-5xl font-bold text-blue-600 mb-1">
          {testimonials.length > 0 ? (testimonials.reduce((sum, t) => sum + t.rating, 0) / testimonials.length).toFixed(1) : '4.8'}
        </div>
        <div class="text-xl font-semibold text-gray-900 mb-2">
          Note globale
        </div>
        <div class="text-lg mb-2" set:html={generateStars(testimonials.length > 0 ? testimonials.reduce((sum, t) => sum + t.rating, 0) / testimonials.length : 4.8)}></div>
        <div class="text-gray-600">
          Basée sur {testimonials.length} avis vérifiés
        </div>
      </div>
      
      <div class="border-t sm:border-t-0 sm:border-l border-gray-200 h-full py-4 sm:py-0 sm:pl-8 mt-4 sm:mt-0">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div class="flex items-center">
            <i class="fa-solid fa-thumbs-up text-green-500 text-2xl mr-3"></i>
            <div>
              <div class="font-semibold">Satisfaction Client</div>
              <div class="text-gray-600">98% de clients satisfaits</div>
            </div>
          </div>
          
          <div class="flex items-center">
            <i class="fa-solid fa-certificate text-blue-500 text-2xl mr-3"></i>
            <div>
              <div class="font-semibold">Qualité de Service</div>
              <div class="text-gray-600">Service professionnel garanti</div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Témoignages -->
    <div class="testimonials-slider relative">
      <div class="overflow-hidden">
        <div class="testimonials-track flex transition-transform duration-500" style="transform: translateX(0px);">
          {testimonials.map((testimonial) => (
            <div class="testimonial-item flex-shrink-0 w-full md:w-1/2 lg:w-1/3 px-4">
              <div class="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 p-6 h-full flex flex-col">
                <div class="flex items-start mb-4">
                  <div class="flex-shrink-0 mr-4">
                    {testimonial.photo ? (
                      <img 
                        src={testimonial.photo} 
                        alt={testimonial.name}
                        class="w-16 h-16 rounded-full object-cover"
                      />
                    ) : (
                      <div class="w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center">
                        <i class="fa-solid fa-user text-blue-600 text-2xl"></i>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">
                      {testimonial.name}
                    </h3>
                    <p class="text-gray-600">
                      {testimonial.city}
                    </p>
                    <div class="mt-1" set:html={generateStars(testimonial.rating)}></div>
                  </div>
                </div>
                
                <div class="flex-grow">
                  <p class="text-gray-700 italic">
                    "{testimonial.comment}"
                  </p>
                </div>
                
                <div class="mt-4 pt-4 border-t border-gray-100 flex justify-between items-center">
                  <div class="text-sm text-gray-500">
                    {testimonial.date}
                  </div>
                  
                  <div class="text-sm text-blue-600">
                    Service: {testimonial.service}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Contrôles du carrousel -->
      <button class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:shadow-lg focus:outline-none prev-button">
        <i class="fa-solid fa-chevron-left text-blue-600"></i>
      </button>
      
      <button class="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:shadow-lg focus:outline-none next-button">
        <i class="fa-solid fa-chevron-right text-blue-600"></i>
      </button>
      
      <!-- Pagination -->
      <div class="flex justify-center mt-8 dots-container"></div>
    </div>
    
    <!-- Autres plateformes d'avis -->
    <div class="mt-12 text-center">
      <p class="text-gray-700 mb-4">
        Retrouvez-nous également sur :
      </p>
      <div class="flex flex-wrap justify-center gap-6">
        <a href="#" class="flex items-center px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
          <div class="w-8 h-8 mr-2 flex items-center justify-center">
            <i class="fa-brands fa-google text-2xl text-red-500"></i>
          </div>
          <div class="text-left">
            <div class="text-sm text-gray-700">Google</div>
            <div class="flex">
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star-half-alt text-yellow-400 text-xs"></i>
            </div>
          </div>
        </a>
        
        <a href="#" class="flex items-center px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
          <div class="w-8 h-8 mr-2 flex items-center justify-center">
            <i class="fa-brands fa-facebook text-2xl text-blue-600"></i>
          </div>
          <div class="text-left">
            <div class="text-sm text-gray-700">Facebook</div>
            <div class="flex">
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
            </div>
          </div>
        </a>
        
        <a href="#" class="flex items-center px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
          <div class="w-8 h-8 mr-2 flex items-center justify-center">
            <i class="fa-solid fa-thumbs-up text-2xl text-green-600"></i>
          </div>
          <div class="text-left">
            <div class="text-sm text-gray-700">TrustPilot</div>
            <div class="flex">
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-solid fa-star text-yellow-400 text-xs"></i>
              <i class="fa-regular fa-star text-yellow-400 text-xs"></i>
            </div>
          </div>
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.testimonials-track');
    const items = document.querySelectorAll('.testimonial-item');
    const prevButton = document.querySelector('.prev-button');
    const nextButton = document.querySelector('.next-button');
    const dotsContainer = document.querySelector('.dots-container');
    
    let currentIndex = 0;
    let slideWidth = 0;
    let slidesToShow = 1;
    
    // Fonction pour calculer le nombre de slides à afficher selon la largeur de l'écran
    const calculateSlidesToShow = () => {
      if (window.innerWidth >= 1024) {
        slidesToShow = 3; // Écrans larges (lg)
      } else if (window.innerWidth >= 768) {
        slidesToShow = 2; // Écrans moyens (md)
      } else {
        slidesToShow = 1; // Petits écrans
      }
      
      return slidesToShow;
    };
    
    // Fonction pour calculer la largeur du slide
    const calculateSlideWidth = () => {
      if (!track || !track.parentElement) return 0;
      const trackWidth = track.parentElement.offsetWidth;
      slideWidth = trackWidth / calculateSlidesToShow();
      
      // Mettre à jour la largeur des items
      items.forEach(item => {
        if (item) {
          item.style.width = `${slideWidth}px`;
        }
      });
      
      return slideWidth;
    };
    
    // Fonction pour créer les points de pagination
    const createDots = () => {
      if (!dotsContainer || !items.length) return;
      
      dotsContainer.innerHTML = '';
      
      const totalDots = Math.ceil(items.length / calculateSlidesToShow());
      
      for (let i = 0; i < totalDots; i++) {
        const dot = document.createElement('button');
        dot.classList.add('mx-1', 'w-3', 'h-3', 'rounded-full', 'bg-gray-300', 'hover:bg-gray-400', 'focus:outline-none');
        
        if (i === currentIndex) {
          dot.classList.add('bg-blue-600');
        }
        
        dot.addEventListener('click', () => {
          goToSlide(i);
        });
        
        dotsContainer.appendChild(dot);
      }
    };
    
    // Fonction pour mettre à jour les points actifs
    const updateDots = () => {
      if (!dotsContainer) return;
      
      const dots = dotsContainer.querySelectorAll('button');
      
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-blue-600');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.remove('bg-blue-600');
          dot.classList.add('bg-gray-300');
        }
      });
    };
    
    // Fonction pour aller à un slide spécifique
    const goToSlide = (index) => {
      if (!track || !items.length) return;
      
      const totalSlides = Math.ceil(items.length / calculateSlidesToShow());
      
      // Boucler les slides si nécessaire
      if (index < 0) {
        index = totalSlides - 1;
      } else if (index >= totalSlides) {
        index = 0;
      }
      
      currentIndex = index;
      const offset = -slideWidth * currentIndex * calculateSlidesToShow();
      
      track.style.transform = `translateX(${offset}px)`;
      updateDots();
    };
    
    // Initialisation
    const initSlider = () => {
      calculateSlideWidth();
      createDots();
      goToSlide(0);
      
      // Événements des boutons
      if (prevButton) {
        prevButton.addEventListener('click', () => {
          goToSlide(currentIndex - 1);
        });
      }
      
      if (nextButton) {
        nextButton.addEventListener('click', () => {
          goToSlide(currentIndex + 1);
        });
      }
      
      // Défilement automatique
      setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 7000);
    };
    
    // Redimensionnement de la fenêtre
    window.addEventListener('resize', () => {
      calculateSlideWidth();
      createDots();
      goToSlide(currentIndex);
    });
    
    if (track && items.length > 0) {
      initSlider();
    }
  });
</script>